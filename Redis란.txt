# Redis란?
REmote DIctionary Server
말 그대로 데이터를 파이썬 Dict 형태
"Key : Value"
형태로 저장해주는 오픈소스 인 메모리 DB서버이다.

# 연결 구조
기존의 이해하는 구조는

WAS <-> Redis <-> DB

로 알고 있지만 구현해보니까 

WAS <-> DB
WAS <-> Redis

이런 느낌? 이다
WAS는 읽기 요청을 First로 Redis에 요청하고
없으면 DB에 쿼리해서 결과를 Redis에 저장한다
이후 동일쿼리 발생시 이전에 Redis에 저장된 데이터가 반환된다.

# 어차피 둘다 원격지 서버인데 왜 Redis가 더 빠름?

DB는 데이터를 하드디스크에 저장 -> 느림
Redis는 데이터를 RAM에 저장 -> 조나 빠름

********************** 여기까지가 데이터 캐시 발표 및 면접 사전지식 ****************************

# Redis 세션 관리

기존의 장고에서 로그인 세션 정보는
Django Session Manager라는 장고 내부 모듈에서 관리 (내부 모듈이라는 표현이 정확하진 않음)
-> 내부 모듈에 저장 -> 단일 서버 단위에 저장 

# 문제점
오토 스케일링 환경에서 사용자가 사용하던 서버에 스케일 인이 발생하면
사용자는 기존에 저장중이던 모든 세션 데이터를 유실하는 상황 발생

# 해결 방안
세션 데이터 저장 위치를 장고 내부 모듈이 아닌 외부 Redis 서버로 설정함으로써
모든 WAS서버는 하나의 Redis 서버에서 세션 데이터를 읽고 쓰기 때문에 기존에 서버가 다운되어도
세션 데이터를 유실하지 않고 유지할 수 있다.

# 세션 데이터의 작동 방식
서버에 저장되는 클라이언트 데이터 -> 세션 데이터
브라우저에 저장되는 클라이언트 데이터 -> 쿠키 데이터
@ 로그인 성공 -> 세션 데이터 저장 -> 브라우저에 쿠키 데이터 반환 -> 사용자는 서버에 요청시 항상 쿠키 데이터를 전송하고 서버는 쿠키와 세션 데이터를 대조해서 로그인 유지와 같은 기능이 작동하는 것
 


