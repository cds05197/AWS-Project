< 개발 환경 >
.... Write Code ....
pip freeze > requirements.txt -->> 개발 환경에서 의존성 패키지 설치 목록 작성
git add .
git commit -m "Commit Message"
git push

<배포 환경 스크립트>
cd ~
rm -rf django
git clone https://github.com/cds05197/django.git
cd django
\cp -rf config MTV common template requirements.txt /my-django
cd /my-django

sudo sed -i "/twisted-iocpsupport==1.0.2/d" /my-django/requirements.txt -->> 테스트 시 에러 유발 코드삭제
pip install -r requirements.txt -->> 의존성 패키지 설치

sudo sed -i "s/DEBUG = .*/DEBUG = False/" /my-django/config/settings.py 
sudo sed -i "s/is_Production = .*/is_Production = True/" /my-django/config/settings.py 
sudo sed -i "s/DataBase_Write_Endpoint = .*/DataBase_Write_Endpoint = \"{Write_Endpoint}\"/" /my-django/config/settings.py 
sudo sed -i "s/DataBase_Read_Endpoint = .*/DataBase_Read_Endpoint = \"{Read_Endpoint}\"/" /my-django/config/settings.py
sudo sed -i "s/USE_CACHE = .*/USE_CACHE = True/" /my-django/config/settings.py
sudo sed -i "s/IS_HOME = .*/IS_HOME = False/" /my-django/config/settings.py
sudo sed -i "s/ REDIS_HOST = .*/ REDIS_HOST = \"{REDIS_HOST}\"/" /my-django/config/settings.py
sudo systemctl restart kgcha

<CI / CD 구성 작업>
1. EC2 IAM 역할 추가
-> AmazonEC2RoleforAWSCodeDeploy 정책 추가

2. EC2 서버 세팅
< TimeZone 서울로 변경 >
sudo rm /etc/localtime
sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

< CodeDeploy Agent 설치 >
yum -y install ruby
-> codedeploy 설치 시 ruby언어 사용해서 설치해야함
cd ~
wget https://aws-codedeploy-ap-northeast-2.s3.ap-northeast-2.amazonaws.com/latest/install
-> codedeploy 설치 파일 내려받기
chmod +x ./install
sudo ./install auto- > 설치작업
sudo systemctl status codedeploy-agent -> running 상태 확인

3. CodeDeploy 권한 생성
IAM 역할 -> AWS 서비스 -> CodeDeploy 선택
AWSCodeDeployRole 선택
태그 및 역할 이름 원하는 이름으로 생성

4. CodeDeploy 생성
CodeDeploy -> 애플리케이션 생성

애플리케이션 이름 : KGCha-Django-githubaction
컴퓨팅 플랫폼 : EC2/온프레미스
배포그룹생성 ->
	배포그룹이름 : KGCha-Django-githubaction-group
	서비스 역할 : 아까 만든 역할
	배포 유형 : 현재 위치 선택
	환경 구성 : 프로젝트에서는 Auto Scaling 그룹 / 테스트는 EC2 인스턴스
	태그 그룹 : 생성된 EC2 인스턴스 이름 -> 3개까지 지정 가능 / Auto Scaling으로 생성시 태그에 Name 지정 필수
	배포 설정 : AllAtOnce
	로드 밸런서 : 프로젝트시 활성화, 테스트는 비 활성화


5. Gitgub Action
레포지터리 세팅 -> Secrets -> AWS Acces Key, Scret Key ,Region 설정

이후 Gitgub Action WorkFlow 작성
##########################################
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  AWS-Django-CI:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        python manage.py test
  AWS-Django-CD:

    runs-on: ubuntu-latest
    needs: [ AWS-Django-CI ]

    steps:
      # Step 1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2
      - name: Create CodeDeploy Deployment
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name KGCha-Django-githubaction \
            --deployment-group-name KGCha-Django-githubaction-group \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }}
##########################################

이후 레포지터리 최상위 경로에 appspec.yml 작성

##########################################
version: 0.0
os: linux
files:
 - source: /
   destination: /root/django
permissions:
  - object: scripts
    pattern: "**"
    owner: root
    group: root
    mode: 755
    type:
      - file
  - object: /root/django/scripts
    pattern: "**"
    owner: root
    group: root
    mode: 755
    type:
      - file

hooks:
  BeforeInstall:
   - location: /scripts/before_update.sh
     timeout: 30
     runas: root
  AfterInstall:
   - location: /scripts/update_project.sh
     timeout: 300
     runas: root
  ValidateService:
   - location: /scripts/validation.sh
     timeout: 30
     runas: root
##########################################

레포지터리 최상위 경로에 scripts디렉터리 생성 -> 하위에 before_update.sh / update_project.sh 작성

##########################################
! scripts/before_update.sh
#!/bin/bash
cd /root
rm -rf django

! scripts/update_project.sh
#!/bin/bash

cd /root/django


\cp -rf config MTV common templates requirements.txt /my-django
cd /my-django
source myhome/bin/activate

sudo sed -i "/twisted-iocpsupport==1.0.2/d" /my-django/requirements.txt
pip install -r requirements.txt

sudo sed -i "s/DEBUG = .*/DEBUG = False/" /my-django/config/settings.py
sudo sed -i "s/is_Production = .*/is_Production = False/" /my-django/config/settings.py
sudo sed -i "s/DataBase_Write_Endpoint = .*/DataBase_Write_Endpoint = \"{Write_Endpoint}\"/" /my-django/config/settings.py
sudo sed -i "s/DataBase_Read_Endpoint = .*/DataBase_Read_Endpoint = \"{Read_Endpoint}\"/" /my-django/config/settings.py
sudo sed -i "s/USE_CACHE = .*/USE_CACHE = False/" /my-django/config/settings.py
sudo sed -i "s/IS_HOME = .*/IS_HOME = False/" /my-django/config/settings.py
sudo sed -i "s/ REDIS_HOST = .*/ REDIS_HOST = \"{REDIS_HOST}\"/" /my-django/config/settings.py
sudo systemctl restart kgcha

! scripts/validation.sh
#!/bin/bash

result=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1/)
if [[ "$result" =~ "200" ]]; then
  exit 0
else
  exit 1
fi

##########################################

이후 깃 허브에 코드 푸시시 자동으로 Github Action 수행 -> AWS CodeDeploy 트리거 -> CodeDeploy는
리포지터리 코드를 배포 그룹에 해당하여 appspec.yml에 명시된 Workflow대로 작업 진행

# 스크립트 파일 실행 권한 부여 
개발환경 > git update-index --chmod=+x {Script.sh}

	